1. Questions/Clarifications:
Memory Tracking:

The mem.c implementation tracks allocations in singleton_mem.block, but it doesn't seem to be used for anything beyond tracking (e.g., no leak detection, no forced cleanup on exit). Is this intentional?

The trackMem() function is exposed in mem.c but not in sigcore.h. Is this meant to be an internal-only function?

Slot Array (slot_array_s):

The ISlotArray interface has a tryGetAt() method, but the implementation isn't shown. How does this differ from getAt in IList? Does it return a status code and use an out parameter?

The slot_array_s struct has a count field, but list_s computes count dynamically. Why the difference?

Error Handling:

Many functions return void or assume success (e.g., addItem() in list.c silently fails if resizing fails). Would it be useful to add error codes or assertions for debugging?

The Iterator.findNext() method returns a boolean and uses an out parameter for the result. Would it be clearer to return the found object directly (with NULL indicating failure)?

Thread Safety:

The library doesnâ€™t appear to be thread-safe (e.g., singleton_mem in mem.c is shared globally). Is this by design, or would you consider adding atomic operations/mutexes for thread-safe use?

String Utilities:

The IString interface is minimal (copy, concat, format, etc.). Are there plans to add common helpers like trim(), split(), or toLower()?
